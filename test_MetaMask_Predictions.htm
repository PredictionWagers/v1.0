<html>
<head>

<script src="web3.min_1.36.js"></script>
<script src="ethereumjs-tx.js"></script>
<script src='abi_simple1.js'></script>

<script>
var da, gsCurrentNetwork, gsUserETHAccount, gobjContract, gnGasPrice, gnGasEstimate

var gsUserAddress2 = "0x2f4Edafe16509913198950226Bf148616D91BeE3"		// Account #2

var gnTransferAmount = .001

//Simple contract: Kovan, Account #2
var gsContractAddress = "0x7f056cffbca26785b6644e0d0de0de7b858d785a";

async function DoLoad() {
    da = document.all
    if (window.ethereum) {
		window.web3 = new Web3(ethereum);

		try {
			var accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
			gsUserETHAccount = accounts[0]
			gsCurrentNetwork = await web3.eth.net.getNetworkType()

			var nNetworkID = await web3.eth.net.getId()
			console.log("Metamask Network: " + gsCurrentNetwork)
			console.log("nNetworkID: " + nNetworkID)
			console.log("gsUserETHAccount: " + gsUserETHAccount)

			gnGasPrice = web3.utils.toWei(String(1), 'gwei')

			gobjContract = new web3.eth.Contract(gobjABI, gsContractAddress)

			//DoGetGlobalsFromContract()
			DoSetGlobalsFromContract()
			//Do_TransferXDai()
			//DoConfirmTransaction("0xd1130a35c1877952d61de7936b97c4e636137ce811fdb6af5e7ddd07cbce9c6f")

		} catch (error) {
		    if (error.code === 4001) {
				// User rejected request
			}
			console.log("Metamask ERROR:" + error)
		}
	}
}
async function DoIt() {
	DoGetGlobalsFromContract()
}

async function DoConfirmTransaction(sHash) {
	var objTransaction = await web3.eth.getTransaction(sHash)
	var nBlockNumber = parseFloat(objTransaction.blockNumber)
	console.log("objTransaction.blockNumber: " + nBlockNumber)
	console.log("objTransaction.value: " + web3.utils.fromWei(objTransaction.value))
	console.log("web3.eth.getBlockNumber(): " + await web3.eth.getBlockNumber())

	if (isNaN(nBlockNumber)) {
		console.log("TRANSACTION NOT COMPLETED")
	}
}

async function Do_TransferXDai() {
    console.log("<br>DoTransferXDai: START")
	
	try {		
		gnGasEstimate = await web3.eth.estimateGas({
			from: gsUserETHAccount,
			to: gsUserAddress2,
			gasPrice: web3.utils.toHex(gnGasPrice),
			value: web3.utils.toWei(gnTransferAmount.toString())
		})
		gnGasEstimate = (gnGasEstimate * 1.1).toFixed()
		console.log("gnGasEstimate: " + gnGasEstimate)

/*
// This method does not return until the transaction is completed; takes 10-15 seconds
		sTransactionID = await web3.eth.sendTransaction({
			from: gsUserETHAccount,
			to: gsUserAddress2,
			gasLimit: web3.utils.toHex(gnGasEstimate),
			gasPrice: web3.utils.toHex(gnGasPrice),
			value: web3.utils.toWei(gnTransferAmount.toString())
		})
		console.log("sTransactionID: " + sTransactionID)
*/

// This method immediately returns the tx hash
		web3.eth.sendTransaction({
			from: gsUserETHAccount,
			to: gsUserAddress2,
			gasLimit: web3.utils.toHex(gnGasEstimate),
			gasPrice: web3.utils.toHex(gnGasPrice),
			value: web3.utils.toWei(gnTransferAmount.toString())
		})
		.on('transactionHash', function(hash){
			console.log("hash: " + hash)
			DoConfirmTransaction(hash)
		})

	}
	catch {
		alert("An error was encountered. Your transaction was not processed.")
	}

    console.log("<br>DoTransferXDai: END")
}

async function DoGetGlobalsFromContract() {
	sResult = await gobjContract.methods.get().call()
	console.log("DoGetGlobalsFromContract: " + sResult)
}

async function DoSetGlobalsFromContract() {
	var objData = gobjContract.methods["set"](
		9
	).encodeABI()
	DoSendSignedTransaction(objData);
}

async function DoSendSignedTransaction(objData) {
	try {		
		gnGasEstimate = await web3.eth.estimateGas({
			from: gsUserETHAccount,
			to: gsContractAddress,
			gasPrice: web3.utils.toHex(gnGasPrice),
			data: objData,
			value: 0
		})
		gnGasEstimate = (gnGasEstimate * 1.1).toFixed()

		sTransactionID = await web3.eth.sendTransaction({
			from: gsUserETHAccount,
			to: gsContractAddress,
			data: objData,
			gasLimit: web3.utils.toHex(gnGasEstimate),
			gasPrice: web3.utils.toHex(gnGasPrice),
			value: 0
		})
		console.log("sTransactionID: " + sTransactionID)
	}
	catch {
		alert("An error was encountered. Your transaction was not processed.")
	}
}

</script>

<body onload=DoLoad()>
<input type=button value='Do It' onClick=DoIt()>
</body>
</html>
