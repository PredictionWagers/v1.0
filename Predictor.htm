<html><head><title>Prediction Wagers v1.0</title>
<style>
BODY {color:black;font-family:verdana;font-size:12px}
TD {color:black;font-family:verdana;font-size:12px}
A.bluelink {color:blue}
A.bluelink:hover {color:red}
A.yellowlink {color:yellow}
A.yellowlink:hover {color:lime}
input[type=button] {cursor:pointer}
</style>
<script src="web3.min_1.36.js"></script>
<script src="ERC20.abi"></script>
<script src="Predictor.abi"></script>
<script>

var gsaQuestions = ["According to <a target=_ex class=yellowlink href=https://finance.yahoo.com/quote/%5EDJI?p=^DJI>Yahoo Finance</a>, will the <b>Dow Jones Industrial Average</b> be higher than 19,000 on <font color=lime><b>March 16 2020 4:00pm</b></font>?",
"According to the <a target=_ex class=yellowlink href=https://www.predictit.org/markets/detail/3698/Who-will-win-the-2020-US-presidential-election>PredictIt.org</a> market '<b>Who will win the 2020 U.S. presidential election?</b>', will Trump's price be higher than 56 cents at <font color=lime><b>March 16 2020 4:00pm</b></font>?",
"According to <a target=_ex class=yellowlink href=https://finance.yahoo.com/quote/%5EDJI?p=^DJI>Yahoo Finance</a>, will the <b>Dow Jones Industrial Average</b> be higher than 19,000 on <font color=lime><b>March 16 2020 1:00pm</b></font>?"
]

//var gnaExpirationDates = [1587744069,
//1287744069
//]

var gnaExpirationDates = [1587744069,
1287744069,
1587744069
]

var gobjDAIContract, gobjContract_Predictor_MetaMask, gobjWeb3_metamask
var gnMetaMaskOK = 0
var gsMetaMaskAccount = ""
var gsMetaMaskNetwork = ""
var gnMetaMaskBalance = 0
var gcnLatestResolutionDate = 1577577600
var gsDaiContractAddress_Kovan = '0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa'
var gsDaiContractAddress_Mainnet = '0x6B175474E89094C44Da98b954EedeAC495271d0F'

var gcsContract_Predictor_Kovan = "0xC2351a81D498eD1919cB31dB2740C050E9C9F7Cc";
// https://kovan.etherscan.io/address/0xC2351a81D498eD1919cB31dB2740C050E9C9F7Cc
var gcsContract_Predictor_Mainnet = "0x739194690d334f13104A78784F7FDAD48B4067c7";
var gcsContract_Predictor_live = gcsContract_Predictor_Kovan
var gsDaiContractAddress_live = gsDaiContractAddress_Kovan
var gsNetwork_name = ""
var gsNetwork_prefix = ""
var da
var gobjFromContract_Proposals, gobjFromContract_Acceptances
var gcnTransactionFee_Multiplier = 1.015
var gnCurrentDateTime

if (typeof web3 !== 'undefined') {
	gobjWeb3_metamask = new Web3(web3.currentProvider);
	gnMetaMaskOK = 1
}

async function DoLoad(){
	da = document.all

	if (gnMetaMaskOK) {
		ethereum.enable()
		await DoGetMetaMaskAccount()
	} else {
		da.idSpanMetaMaskStatus.innerHTML = "<i>Please use <b>MetaMask</b> to login to Kovan or Mainnet, then refresh this page.</i>"	
	}
	
	da.idSpanCurrentTime.innerHTML = await DoGetCurrentDateTime()

	gobjFromContract_Proposals = await gobjContract_Predictor_MetaMask.methods.getProposals().call()
	gobjFromContract_Acceptances = await gobjContract_Predictor_MetaMask.methods.getAcceptances().call()
	console.log("gobjFromContract_Proposals")
	console.log(gobjFromContract_Proposals)
	console.log("gobjFromContract_Acceptances")
	console.log(gobjFromContract_Acceptances)
	await DoShowDataFromContract()
}

async function DoShowDataFromContract() {
	var nIndex1, sProposerLink, sProposerEtherAddress, nProposalAmount_remaining, sAboveBelow, nMinimumWager, nMaximumWager
	var nAcceptorTotal, nAcceptorProfit, sNetworkToLoginTo, sAcceptorEtherAddress, sHTML
	var nAcceptedWagerAmount, sResolver, nProposerPayout, sProposerPayout_extra, sAcceptorLink,	nProposerNotBet, sProposerNotBet, sProposerWinningPercent
	var sSportsOdd_Proposer, sSportsOdd_Acceptor
///////////////////
// Questions
///////////////////
	sHTML = ""
	for (nIndex1 = gsaQuestions.length-1; nIndex1 >= 0; nIndex1--) {
		if (gnaExpirationDates[nIndex1] < gnCurrentDateTime) {
			continue
		}
		if (sHTML!="") {
			sHTML += "<font style='font-size:2px'><br></font>"
		}
		sHTML += "<table width=99.5% bgcolor=white border=1 cellspacing=0 cellpadding=5 align=center><tr><td>"
		sHTML += "<table width=100% cellspacing=0 cellpadding=0><tr>"
		sHTML += "<td><table cellspacing=0 cellpadding=0 bgcolor=black><tr><td><font color=white>" + gsaQuestions[nIndex1] + "</font></td></tr></table></td>"
		sHTML += "<td align=right><font color=navy><span id=idSpanProfitCalculation_" + nIndex1 + "><i>Enter a <b>Deposit</b> to see <b>Maximum Wager</b>.</i></span></font></td></tr></table>"
		
		sHTML += `				
<font color=maroon><b>Your prediction:</b></font> <select id=idCmbPredictionYesNo_` + nIndex1 + `><option>Yes<option>No</select>
<b>Your Deposit</b>
<input type=text id=idTxtCreate_WagerDeposit_` + nIndex1 + ` style='width:40px' onKeyPress='return CheckWagerDepositForEnter(event,` + nIndex1 + `)' onBlur=DoProfitCalculation(` + nIndex1 + `)>
<b>Minimum Wager</b>
<input type=text id=idTxtCreate_MinimumWager_` + nIndex1 + ` style='width:40px' onKeyPress='return NumericOnly(event)'>
<b>Profit % offered</b>:
<select id=idCmbCreate_Profit_` + nIndex1 + ` onChange=DoProfitCalculation(` + nIndex1 + `)>
<option value=10>(-1000) If you lose, you pay 10% of Acceptor's wager. If you win, you receive 1,000% of your wager.</option>
<option value=20>(-500) If you lose, you pay 20% of Acceptor's wager. If you win, you receive 500% of your wager.</option>
<option value=33>(-300) If you lose, you pay 33% of Acceptor's wager. If you win, you receive 303% of your wager.</option>
<option value=40>(-250) If you lose, you pay 40% of Acceptor's wager. If you win, you receive 250% of your wager.</option>
<option value=50>(-200) If you lose, you pay 50% of Acceptor's wager. If you win, you receive 200% of your wager.</option>
<option value=57>(-175) If you lose, you pay 57% of Acceptor's wager. If you win, you receive 175% of your wager.</option>
<option value=66>(-151) If you lose, you pay 66% of Acceptor's wager. If you win, you receive 151% of your wager.</option>
<option value=75>(-133) If you lose, you pay 75% of Acceptor's wager. If you win, you receive 133% of your wager.</option>
<option value=80>(-125) If you lose, you pay 80% of Acceptor's wager. If you win, you receive 125% of your wager.</option>
<option value=90>(-111) If you lose, you pay 90% of Acceptor's wager. If you win, you receive 111% of your wager.</option>
<option value=95>(-105) If you lose, you pay 95% of Acceptor's wager. If you win, you receive 105% of your wager.</option>
<option value=100 selected>(+100) If you lose, you pay 100% of Acceptor's wager. If you win, you receive 100% of your wager.</option>
<option value=105>(+105) If you lose, you pay 105% of Acceptor's wager. If you win, you receive 95% of your wager.</option>
<option value=111>(+111) If you lose, you pay 111% of Acceptor's wager. If you win, you receive 90% of your wager.</option>
<option value=125>(+125) If you lose, you pay 125% of Acceptor's wager. If you win, you receive 80% of your wager.</option>
<option value=133>(+133) If you lose, you pay 133% of Acceptor's wager. If you win, you receive 75% of your wager.</option>
<option value=150>(+151) If you lose, you pay 151% of Acceptor's wager. If you win, you receive 66% of your wager.</option>
<option value=175>(+175) If you lose, you pay 175% of Acceptor's wager. If you win, you receive 57% of your wager.</option>
<option value=200>(+200) If you lose, you pay 200% of Acceptor's wager. If you win, you receive 50% of your wager.</option>
<option value=250>(+250) If you lose, you pay 250% of Acceptor's wager. If you win, you receive 40% of your wager.</option>
<option value=300>(+303) If you lose, you pay 303% of Acceptor's wager. If you win, you receive 33% of your wager.</option>
<option value=500>(+500) If you lose, you pay 500% of Acceptor's wager. If you win, you receive 20% of your wager.</option>
<option value=1000>(+1000) If you lose, you pay 1,000% of Acceptor's wager. If you win, you receive 10% of your wager.</option>
</select>
&nbsp;&nbsp;&nbsp;&nbsp;<input type=button value='Submit' onClick=DoCreate_Submit(` + nIndex1 + `) style='background:navy;color:white;font-size:15px;font-weight:bold'>
`		
		
		sHTML += "</td></tr></table>"
	}
	if (sHTML == '') {
		da.idSpanCreateWagerProposalCaption.innerHTML = "There are no current Questions to create Wager Proposals"
	}
	da.idSpanQuestions.innerHTML = sHTML
///////////////////
// Open Proposals
///////////////////
	var anData = gobjFromContract_Proposals.anData
	
	var cnField_nDateCreated = 0;
	var cnField_nProposalAmount_start = 1;
	var cnField_nMinimumWager = 2;
	var cnField_nPredictedYesNo = 3;
	var cnField_nResolutionDate = 4;
	var cnField_nProfitPercentOffered = 5;
	var cnField_nQuestionID = 6;
	var cnField_nProposalAmount_remaining = 7;
	var cnField_nCancellationDate = 8;
	var cnField_nFinalized_DidYesWin = 9;
	
	sHTML = "<table width=99.5% bgcolor=#f0ffff border=1 cellspacing=0 cellpadding=5 align=center style='height:150px'><tr><td valign=top><center><b><font color=maroon>Open Wager Proposals</font></b></center><font style='font-size:4px'><br></font>";
	sHTML += "<table width=99.5% bgcolor=#ffffff border=1 cellspacing=0 cellpadding=4 align=center>"

	var nNoRecords = 1
	for (nIndex1 = anData.length-1; nIndex1 >= 1; nIndex1--) {
	
		sProposerEtherAddress = gobjFromContract_Proposals.aadrProposerAddress[nIndex1]

		if (gsMetaMaskAccount != sProposerEtherAddress && (gnaExpirationDates[anData[nIndex1][cnField_nQuestionID]] < gnCurrentDateTime || anData[nIndex1][cnField_nFinalized_DidYesWin] != 0 )) {
			continue
		}

		nProposalAmount_remaining = (Math.floor(gobjWeb3_metamask.utils.fromWei(anData[nIndex1][cnField_nProposalAmount_remaining].toString(), 'ether')*100)/100).toFixed(2)
		nMinimumWager = (Math.floor(gobjWeb3_metamask.utils.fromWei(anData[nIndex1][cnField_nMinimumWager].toString(), 'ether')*100)/100).toFixed(2)
		if (nMinimumWager == 0) {
			nMinimumWager = .01
		}
		nMaximumWager = (Math.floor(CleanFloat(nProposalAmount_remaining * (100 / anData[nIndex1][cnField_nProfitPercentOffered]))*100)/100).toFixed(2)
		if (parseFloat(nMinimumWager) > parseFloat(nMaximumWager) || nProposalAmount_remaining == 0 || (gsMetaMaskAccount != sProposerEtherAddress && parseInt(anData[nIndex1][cnField_nResolutionDate]) <= gnCurrentDateTime) ) {
			continue;
		}
		nNoRecords = 0
		
		sProposerLink = "https://" + gsNetwork_prefix + "etherscan.io/address/" + sProposerEtherAddress
		nAcceptorProfit = (Math.floor(CleanFloat(nMaximumWager * (anData[nIndex1][cnField_nProfitPercentOffered] / 100))*100)/100).toFixed(2)
		nAcceptorTotal = (Math.floor(CleanFloat(parseFloat(nMaximumWager) + parseFloat(nAcceptorProfit))*100)/100).toFixed(2)

		sProposerWinningPercent = Math.round(10000 / anData[nIndex1][cnField_nProfitPercentOffered])
		if (sProposerWinningPercent >= 100 ) {
			sSportsOdd_Proposer = "+" + sProposerWinningPercent
			sSportsOdd_Acceptor = "-" + sProposerWinningPercent
			if (sProposerWinningPercent == 100) {
				sSportsOdd_Acceptor = "+" + sProposerWinningPercent
			}
		} else {
			sSportsOdd_Proposer = "-" + anData[nIndex1][cnField_nProfitPercentOffered]
			sSportsOdd_Acceptor = "+" + anData[nIndex1][cnField_nProfitPercentOffered]
			if (anData[nIndex1][cnField_nProfitPercentOffered] == 100) {
				sSportsOdd_Proposer = "+" + anData[nIndex1][cnField_nProfitPercentOffered]
			}
		}

		sAboveBelow_Proposer = "above"
		sAboveBelow_Acceptor = "below"
		if (anData[nIndex1][cnField_nPredictedYesNo] == 0) {
			sAboveBelow_Proposer = "below"
			sAboveBelow_Acceptor = "above"
		}
		var sYesNo_Owner, sYesNo_Others
		if (anData[nIndex1][cnField_nPredictedYesNo] == 1) {
			sYesNo_Owner = "<font color=green><b>YES</b></font>"
			sYesNo_Others = "<font color=red><b>NO</b></font>"
		} else {
			sYesNo_Owner = "<font color=red><b>NO</b></font>"
			sYesNo_Others = "<font color=green><b>YES</b></font>"
		}		

		if (gsMetaMaskAccount) {
			if (gsMetaMaskAccount == sProposerEtherAddress) {
				sHTML_OKToBet = "<input type=button value='Cancel Wager Proposal' onClick=DoCancelProposal(" + nIndex1 + ") style='background:green;color:white;font-size:15px;font-weight:bold'>"
			} else {
				sHTML_OKToBet = "To bet on " + sYesNo_Others +
					", enter <font color=maroon><b>Your Wager:</b></font> <input type=text id=idTxtAcceptor_WagerDeposit" + nIndex1 + " style='width:40px' onKeyPress='return NumericOnly(event)'>"
				sHTML_OKToBet += "<input type=button value='Submit' onClick=DoAcceptor_Submit(" + nIndex1 + "," + nMinimumWager + "," + nMaximumWager + ") style='background:maroon;color:white;font-size:15px;font-weight:bold'>"
			}
		} else {
			sHTML_OKToBet = "To bet on " + sYesNo_Others + ", <b><font color=maroon>login to the " + sNetworkToLoginTo + ".</font></b>"
		}
		
		sHTML += "<tr><td>"
		sHTML += "<table width=100% cellspacing=0 cellpadding=0><tr>"
		
		if (gsMetaMaskAccount == sProposerEtherAddress) {
			sHTML += "<td>On " + DoGetFormattedDateTime(anData[nIndex1][cnField_nDateCreated]) + ", you created a wager proposal (which has <b>" + nProposalAmount_remaining + 
					"</b> remaining), that the answer to the following question is " + sYesNo_Owner + ":</td>"
			sHTML += "<td align=right><b>Minimum wager:</b> " + nMinimumWager + "&nbsp;&nbsp; <b>Maximum wager:</b> " + nMaximumWager + "</td></tr></table>"
			sHTML += "<table cellspacing=0 cellpadding=0 bgcolor=black><tr><td><font color=white>" + gsaQuestions[anData[nIndex1][cnField_nQuestionID]] + "</td></tr></table>"
			
			sHTML += "<table width=100% cellspacing=0 cellpadding=0><tr>"
			sHTML += "<td>You offered <b>" + anData[nIndex1][cnField_nProfitPercentOffered] + "% <i>profit</i></b> (" + sSportsOdd_Acceptor + "). If someone bets <b>" + nMaximumWager + "</b>, you risk losing <b>" + nAcceptorProfit + "</b>. " +
						"If you win, you receive a <i><b>profit</b></i> that is <b>" + sProposerWinningPercent + "%</b> of your risk (" + sSportsOdd_Proposer + ").</td>"
		} else {
			sHTML += "<td>On " + DoGetFormattedDateTime(anData[nIndex1][cnField_nDateCreated]) + ", <a target=_ex class=bluelink href='" + sProposerLink + "'>this Proposer (" + sProposerEtherAddress.substr(0,6) + 
				"..)</a> deposited <b>" + nProposalAmount_remaining + "</b> to wager that the answer to the following question is " + sYesNo_Owner + ":</td>"
			sHTML += "<td align=right><b>Minimum wager:</b> " + nMinimumWager + "&nbsp;&nbsp; <b>Maximum wager:</b> " + nMaximumWager + "</td></tr></table>"
			sHTML += "<table cellspacing=0 cellpadding=0 bgcolor=black><tr><td><font color=white>" + gsaQuestions[anData[nIndex1][cnField_nQuestionID]] + "</td></tr></table>"
			sHTML += "<table width=100% cellspacing=0 cellpadding=0><tr>"
			sHTML += "<td><b>" + anData[nIndex1][cnField_nProfitPercentOffered] + "% <i>profit</i></b> is offered (" + sSportsOdd_Acceptor + "). If you wager <b>" + nMaximumWager + "</b> and win, you will receive <b>" + nAcceptorTotal + 
				"</b>, for a <i><b>profit</b></i> of <b>" + nAcceptorProfit + "</b>.</td>"
		}
		sHTML += "<td align=right>"
		sHTML += sHTML_OKToBet
		sHTML += "</td>"
		sHTML += "</tr></table>"
		sHTML += "</td></tr>"
	}
	sHTML += "</table>"
	sHTML += "</td></tr></table>"

	if (nNoRecords) {
		var sHTML = "<table width=99.5% bgcolor=#f0ffff border=1 cellspacing=0 cellpadding=5 align=center><tr><td><center><b><font color=maroon>There are no Open Wager Proposals</font></b></center><font style='font-size:4px'><br></font></td></tr></table>"
		da.idDivOpenProposals.style.height="50px"
		da.idDivOpenProposals.innerHTML = sHTML
	} else {
		da.idDivOpenProposals.innerHTML = sHTML
	}

///////////////////
// Accepted Wagers
///////////////////
	anData = gobjFromContract_Acceptances.anData
	anAddresses = gobjFromContract_Acceptances.aadrAcceptorAddress

	var cn_A_Field_adrAcceptorAddress = 0
	var cn_A_Field_adrWagerFinalizer = 1
	var cn_A_Field_adrProposerAddress = 2
	
	var cn_D_Field_nProposerID = 0
	var cn_D_Field_nDateCreated = 1
	var cn_D_Field_nAcceptedWagerAmount = 2
	var cn_D_Field_nFinalized_Date = 3
	var cn_D_Field_nFinalized_DidProposerWin = 4
	var cn_D_Field_nFinalized_AmountProposerReceived = 5
	var cn_D_Field_nPredictedYesNo = 6
	var cn_D_Field_nProfitPercentOffered = 7
	var cn_D_Field_nQuestionID = 8
	var cn_D_Field_nFinalized_DidYesWin = 9
	var cn_D_Field_nProposalAmount_remaining = 10

	var sHTML_Unresolved = "<table width=99.5% bgcolor=#f0ffff border=1 cellspacing=0 cellpadding=5 align=center style='height:150px'><tr><td valign=top><center><b><font color=maroon>Your Unresolved Wagers</font></b></center><font style='font-size:4px'><br></font>";
	sHTML_Unresolved += "<table width=99.5% bgcolor=#ffffff border=1 cellspacing=0 cellpadding=4 align=center>"

	var sHTML_Resolved = "<table width=99.5% bgcolor=#f0ffff border=1 cellspacing=0 cellpadding=5 align=center style='height:150px'><tr><td valign=top><center><b><font color=maroon>Your Resolved Wagers</font></b></center><font style='font-size:4px'><br></font>";
	sHTML_Resolved += "<table width=99.5% bgcolor=#ffffff border=1 cellspacing=0 cellpadding=4 align=center>"

	var nNoRecords_Unresolved = 1
	var nNoRecords_Resolved = 1
	for (nIndex1 = 1; nIndex1 < anData.length; nIndex1++) {
		if (anAddresses[nIndex1][cn_A_Field_adrAcceptorAddress] != gsMetaMaskAccount && anAddresses[nIndex1][cn_A_Field_adrProposerAddress] != gsMetaMaskAccount) {
			continue;
		}
		nProposalAmount_remaining = (Math.floor(gobjWeb3_metamask.utils.fromWei(anData[nIndex1][cn_D_Field_nProposalAmount_remaining].toString(), 'ether')*100)/100).toFixed(2)
		nProposerPayout = (Math.floor(gobjWeb3_metamask.utils.fromWei(anData[nIndex1][cn_D_Field_nFinalized_AmountProposerReceived].toString(), 'ether')*100)/100).toFixed(2)
		if (nProposerPayout == 0){
			nProposerPayout = "0"
			sProposerPayout_extra = ""
		} else {
			sProposerPayout_extra = " (not bet)"
		}

		if (anAddresses[nIndex1][cn_A_Field_adrWagerFinalizer] == gsMetaMaskAccount) {
			sResolver = "You"
		} else {
			if (anAddresses[nIndex1][cn_A_Field_adrAcceptorAddress] == gsMetaMaskAccount) {
				sResolver = "The Proposer"
			} else {
				sResolver = "The Acceptor"
			}
		}

		nAcceptedWagerAmount = (Math.floor(gobjWeb3_metamask.utils.fromWei(anData[nIndex1][cn_D_Field_nAcceptedWagerAmount].toString(), 'ether')*100)/100).toFixed(2)
		
		sProposerEtherAddress = anAddresses[nIndex1][cn_A_Field_adrProposerAddress]
		sAcceptorEtherAddress = anAddresses[nIndex1][cn_A_Field_adrAcceptorAddress]
		sProposerLink = "https://" + gsNetwork_prefix + "etherscan.io/address/" + sProposerEtherAddress
		sAcceptorLink = "https://" + gsNetwork_prefix + "etherscan.io/address/" + sAcceptorEtherAddress

		nAcceptorProfit = (Math.floor(CleanFloat(nAcceptedWagerAmount * (anData[nIndex1][cn_D_Field_nProfitPercentOffered] / 100))*100)/100).toFixed(2)
		nAcceptorTotal = (Math.floor(CleanFloat(parseFloat(nAcceptedWagerAmount) + parseFloat(nAcceptorProfit))*100)/100).toFixed(2)
		sProposerWinningPercent = Math.round(10000 / anData[nIndex1][cn_D_Field_nProfitPercentOffered])
	
		if (sProposerWinningPercent >= 100 ) {
			sSportsOdd_Proposer = "+" + sProposerWinningPercent
			sSportsOdd_Acceptor = "-" + sProposerWinningPercent
			if (sProposerWinningPercent == 100) {
				sSportsOdd_Acceptor = "+" + sProposerWinningPercent
			}
		} else {
			sSportsOdd_Proposer = "-" + anData[nIndex1][cn_D_Field_nProfitPercentOffered]
			sSportsOdd_Acceptor = "+" + anData[nIndex1][cn_D_Field_nProfitPercentOffered]
			if (anData[nIndex1][cn_D_Field_nProfitPercentOffered] == 100) {
				sSportsOdd_Proposer = "+" + anData[nIndex1][cn_D_Field_nProfitPercentOffered]
			}
		}
	
		sProposerNotBet = ""
		nProposerNotBet = CleanFloat(parseFloat(nProposerPayout) - (parseFloat(nAcceptorProfit) + parseFloat(nAcceptedWagerAmount) )).toFixed(2)
		if (nProposerNotBet != 0 ) {
			sProposerNotBet = " + " + nProposerNotBet + " not bet"
		}
		
		sAboveBelow_Proposer = "above"
		sAboveBelow_Acceptor = "below"
		if (anData[nIndex1][cn_D_Field_nPredictedYesNo] == 0) {
			sAboveBelow_Proposer = "below"
			sAboveBelow_Acceptor = "above"
		}

		var sYesNo_Owner, sYesNo_Others
		if (anData[nIndex1][cn_D_Field_nPredictedYesNo] == 1) {
			sYesNo_Owner = "<font color=green><b>YES</b></font>"
			sYesNo_Others = "<font color=red><b>NO</b></font>"
		} else {
			sYesNo_Owner = "<font color=red><b>NO</b></font>"
			sYesNo_Others = "<font color=green><b>YES</b></font>"
		}		

		if (anData[nIndex1][cn_D_Field_nFinalized_Date] != "0") {
			// Resolved Wagers
			nNoRecords_Resolved = 0
			sHTML_Resolved += "<tr><td>"
			if (anAddresses[nIndex1][cn_A_Field_adrAcceptorAddress] == gsMetaMaskAccount && anData[nIndex1][cn_D_Field_nFinalized_DidProposerWin] == "0") {
			// Acceptor Won
				sHTML_Resolved += "<b><font color=green>You won " + nAcceptorProfit + "</font></b>, for a " + anData[nIndex1][cn_D_Field_nProfitPercentOffered] + "% profit (" + sSportsOdd_Acceptor + ").&nbsp;&nbsp;"
				sHTML_Resolved += "On <b>" + DoGetFormattedDateTime(anData[nIndex1][cn_D_Field_nDateCreated]) + "</b>, you made a <b>" + nAcceptedWagerAmount + 
					"</b> wager with <a target=_ex class=bluelink href='" + sProposerLink + "'>this Proposer (" + sProposerEtherAddress.substr(0,6) + "..)</a>. " + 
					"You bet that the answer to the following question is " +  sYesNo_Others + ":"
				sHTML_Resolved += "<table cellspacing=0 cellpadding=0 bgcolor=black><tr><td><font color=white>" + gsaQuestions[anData[nIndex1][cn_D_Field_nQuestionID]] + "</td></tr></table>"
				sHTML_Resolved += "<table width=100% cellspacing=0 cellpadding=0><tr>"
				sHTML_Resolved += "<td><b><font color=maroon>[Payout]</font></b> <b>You: " + nAcceptorTotal + "</b> (" + (nAcceptedWagerAmount) + " bet + " + nAcceptorProfit + " profit), <b>Proposer: " +
						nProposerPayout + "</b>" + sProposerPayout_extra + "</td>"
				sHTML_Resolved += "<td align=right>" + sResolver + " resolved the bet at <b>" + DoGetFormattedDateTime(anData[nIndex1][cn_D_Field_nFinalized_Date]) + "</b>.</td>"
			}

			if (anAddresses[nIndex1][cn_A_Field_adrAcceptorAddress] == gsMetaMaskAccount && anData[nIndex1][cn_D_Field_nFinalized_DidProposerWin] != "0") {
			// Acceptor Lost
				sHTML_Resolved += "<b><font color=red>You lost " + nAcceptedWagerAmount + ".</font></b>&nbsp;&nbsp;"
				sHTML_Resolved += "On <b>" + DoGetFormattedDateTime(anData[nIndex1][cn_D_Field_nDateCreated]) + "</b>, you made a <b>" + nAcceptedWagerAmount + 
					"</b> wager with <a target=_ex class=bluelink href='" + sProposerLink + "'>this Proposer (" + sProposerEtherAddress.substr(0,6) + "..)</a>. " + 
					"You bet that the answer to the following question is " +  sYesNo_Others + ":"
				sHTML_Resolved += "<table cellspacing=0 cellpadding=0 bgcolor=black><tr><td><font color=white>" + gsaQuestions[anData[nIndex1][cn_D_Field_nQuestionID]] + "</td></tr></table>"
				sHTML_Resolved += "<table width=100% cellspacing=0 cellpadding=0><tr>"
				sHTML_Resolved += "<td><b><font color=maroon>[Payout]</font></b> <b>You: 0</b>, <b>Proposer: " + nProposerPayout + " </b>(" + nAcceptorProfit + " bet + " + nAcceptedWagerAmount + " profit" + sProposerNotBet + ")</td>"
				sHTML_Resolved += "<td align=right>" + sResolver + " resolved the bet at <b>" + DoGetFormattedDateTime(anData[nIndex1][cn_D_Field_nFinalized_Date]) + "</b>.</td>"
			
			}

			if (anAddresses[nIndex1][cn_A_Field_adrAcceptorAddress] != gsMetaMaskAccount && anData[nIndex1][cn_D_Field_nFinalized_DidProposerWin] != "0") {
			// Proposer Won
				sHTML_Resolved += "<b><font color=green>You won " + nAcceptedWagerAmount + "</font></b>, for a " + sProposerWinningPercent + "% profit (" + sSportsOdd_Proposer + ").&nbsp;&nbsp;"
				sHTML_Resolved += "On <b>" + DoGetFormattedDateTime(anData[nIndex1][cn_D_Field_nDateCreated]) + "</b>, " + 
					"<a target=_ex class=bluelink href='" + sAcceptorLink + "'>this Acceptor (" + sAcceptorEtherAddress.substr(0,6) + "..)</a> made a <b>" + nAcceptedWagerAmount + "</b> wager with you. " +
					"You bet that the answer to the following question is " +  sYesNo_Owner + ":"
				sHTML_Resolved += "<table cellspacing=0 cellpadding=0 bgcolor=black><tr><td><font color=white>" + gsaQuestions[anData[nIndex1][cn_D_Field_nQuestionID]] + "</td></tr></table>"
				sHTML_Resolved += "<table width=100% cellspacing=0 cellpadding=0><tr>"
				sHTML_Resolved += "<td><b><font color=maroon>[Payout]</font></b> <b>You: " + nProposerPayout + " </b>(" + nAcceptorProfit + " bet + " + nAcceptedWagerAmount + " profit" + sProposerNotBet + "), <b>Acceptor: 0</b></td>"
				sHTML_Resolved += "<td align=right>" + sResolver + " resolved the bet at <b>" + DoGetFormattedDateTime(anData[nIndex1][cn_D_Field_nFinalized_Date]) + "</b>.</td>"
			}

			if (anAddresses[nIndex1][cn_A_Field_adrAcceptorAddress] != gsMetaMaskAccount && anData[nIndex1][cn_D_Field_nFinalized_DidProposerWin] == "0") {
			// Proposer Lost
				sHTML_Resolved += "<b><font color=red>You lost " + nAcceptorProfit + "</font></b>, for a " + anData[nIndex1][cn_D_Field_nProfitPercentOffered] + "% loss (" + sSportsOdd_Acceptor + ").&nbsp;&nbsp;"
				sHTML_Resolved += "On <b>" + DoGetFormattedDateTime(anData[nIndex1][cn_D_Field_nDateCreated]) + "</b>, " + 
					"<a target=_ex class=bluelink href='" + sAcceptorLink + "'>this Acceptor (" + sAcceptorEtherAddress.substr(0,6) + "..)</a> made a <b>" + nAcceptedWagerAmount + "</b> wager with you. " +
					"You bet that the answer to the following question is " +  sYesNo_Owner + ":"
				sHTML_Resolved += "<table cellspacing=0 cellpadding=0 bgcolor=black><tr><td><font color=white>" + gsaQuestions[anData[nIndex1][cn_D_Field_nQuestionID]] + "</td></tr></table>"
				sHTML_Resolved += "<table width=100% cellspacing=0 cellpadding=0><tr>"
				sHTML_Resolved += "<td><b><font color=maroon>[Payout]</font></b> <b>You: " + nProposerPayout + "</b>" + sProposerPayout_extra + 
						", <b>Acceptor: " + nAcceptorTotal + "</b> (" + (nAcceptedWagerAmount) + " bet + " + nAcceptorProfit + " profit)</td>"
				sHTML_Resolved += "<td align=right>" + sResolver + " resolved the bet at <b>" + DoGetFormattedDateTime(anData[nIndex1][cn_D_Field_nFinalized_Date]) + "</b>.</td>"
			
			}
			sHTML_Resolved += "</tr></table>"
			sHTML_Resolved += "</td></tr>"
		} else {
			// Unresolved Wagers
			nNoRecords_Unresolved = 0
			var sYouWonOrLost = ""
			var nYouLost = 0
			sHTML_Unresolved += "<tr><td>"
			if (anAddresses[nIndex1][cn_A_Field_adrAcceptorAddress] == gsMetaMaskAccount) {
				//Acceptor is viewing
				if (anData[nIndex1][cn_D_Field_nFinalized_DidYesWin] == anData[nIndex1][cn_D_Field_nPredictedYesNo]) {
					sYouWonOrLost = "<font color=red><b>YOU LOST.</b></font>"
					nYouLost = 1
				} else if (anData[nIndex1][cn_D_Field_nFinalized_DidYesWin] != 0) {
					sYouWonOrLost = "<font color=green><b>YOU WON!</b></font> To receive <b>" + nAcceptorTotal + "</b> (for a <b>" + anData[nIndex1][cn_D_Field_nProfitPercentOffered] + 
					"% <i>profit</i></b> (" + sSportsOdd_Acceptor + ") of <b>" + nAcceptorProfit + "</b>), " +
						" click <b>[Resolve Wager]</b>."
				} else {
					sYouWonOrLost = "If you win, you will receive <b>" + nAcceptorTotal + "</b>, for a <b>" + anData[nIndex1][cn_D_Field_nProfitPercentOffered] + "% <i>profit</i></b> (" + sSportsOdd_Acceptor + ") of <b>" + nAcceptorProfit + "</b>."
				}

				sHTML_Unresolved += "On " + DoGetFormattedDateTime(anData[nIndex1][cn_D_Field_nDateCreated]) + ", you made a <b>" + nAcceptedWagerAmount + "</b> wager with " + 
					"<a target=_ex class=bluelink href='" + sProposerLink + "'>this Proposer (" + sProposerEtherAddress.substr(0,6) + "..)</a>."
				sHTML_Unresolved += "&nbsp;&nbsp;You bet that the answer to the following question is " +  sYesNo_Others + ":<br>"
				sHTML_Unresolved += "<table cellspacing=0 cellpadding=0 bgcolor=black><tr><td><font color=white>" + gsaQuestions[anData[nIndex1][cn_D_Field_nQuestionID]] + "</td></tr></table>"
				sHTML_Unresolved += "<table width=100% cellspacing=0 cellpadding=0><tr>"
				sHTML_Unresolved += "<td>" + sYouWonOrLost + "</td>"
			} else {
				//Proposer is viewing
				if (anData[nIndex1][cn_D_Field_nFinalized_DidYesWin] == anData[nIndex1][cn_D_Field_nPredictedYesNo]) {
					sYouWonOrLost = "<font color=green><b>YOU WON!</b></font> To receive <b>" + nAcceptorTotal + "</b>, for a <b>" + sProposerWinningPercent + "% <i>profit</i></b> (" + sSportsOdd_Proposer + ") of <b>" + nAcceptedWagerAmount + "</b>" +
					" (plus your remaining deposit of <b>" + nProposalAmount_remaining + "</b>)," +
						" click <b>[Resolve Wager]</b>."
				} else if (anData[nIndex1][cn_D_Field_nFinalized_DidYesWin] != 0) {
					sYouWonOrLost = "<font color=red><b>YOU LOST.</b></font>"
					if (nProposalAmount_remaining != "0.00") {
						sYouWonOrLost += " To receive your remaining deposit of <b>" + nProposalAmount_remaining + "</b>, click <b>[Resolve Wager]</b>."
					}
				} else {
					sYouWonOrLost = "If you win, you will receive <b>" + nAcceptorTotal + "</b>, for a <b>" + sProposerWinningPercent + "% <i>profit</i></b> (" + sSportsOdd_Proposer + ") of <b>" + nAcceptedWagerAmount + "</b>" +
						", plus your remaining deposit of <b>" + nProposalAmount_remaining + "</b>."

				}
				sHTML_Unresolved += "On " + DoGetFormattedDateTime(anData[nIndex1][cn_D_Field_nDateCreated]) + ", <a target=_ex class=bluelink href='" + sAcceptorLink + 
					"'>this Acceptor (" + sAcceptorEtherAddress.substr(0,6) + "..)</a> made a <b>" + nAcceptedWagerAmount + "</b> wager with you."
				sHTML_Unresolved += "&nbsp;&nbsp;You bet <b>" + nAcceptorProfit + "</b> that the answer to the following question is " +  sYesNo_Owner + ":<br>"
				sHTML_Unresolved += "<table cellspacing=0 cellpadding=0 bgcolor=black><tr><td><font color=white>" + gsaQuestions[anData[nIndex1][cn_D_Field_nQuestionID]] + "</td></tr></table>"
				sHTML_Unresolved += "<table width=100% cellspacing=0 cellpadding=0><tr>"
				sHTML_Unresolved += "<td>" + sYouWonOrLost + "</td>"
			}
			sHTML_Unresolved += "<td align=right>"
			
			if (anData[nIndex1][cn_D_Field_nFinalized_DidYesWin] == 0) {
				sHTML_Unresolved += "The <font color=maroon><b>[Resolve Wager]</b></font> button will be displayed within 30 minutes after <font color=navy><b>" + DoGetFormattedDateTime(gnaExpirationDates[anData[nIndex1][cn_D_Field_nQuestionID]]) + "</b></font>"
			} else {
				if (nYouLost == 0) {
					sHTML_Unresolved += "<input type=button value='Resolve Wager' onClick=DoResolveWager(" + nIndex1 + ") style='background:black;color:white;font-size:13px;font-weight:bold'>"
				}
			}
			
			sHTML_Unresolved += "</td></tr></table>"
			
			sHTML_Unresolved += "</td></tr>"
		}
		sHTML_Unresolved += "</td></tr>"
	}
	
	sHTML_Unresolved += "</table>"
	sHTML_Unresolved += "</td></tr></table>"

	sHTML_Resolved += "</table>"
	sHTML_Resolved += "</td></tr></table>"

	if (nNoRecords_Unresolved) {
		var sHTML_Unresolved = "<table width=99.5% bgcolor=#f0ffff border=1 cellspacing=0 cellpadding=5 align=center><tr><td><center><b><font color=maroon>You have no Unresolved Wagers</font></b></center><font style='font-size:4px'><br></font></td></tr></table>"
		da.idDivUnresolvedWagers.style.height="50px"
		da.idDivUnresolvedWagers.innerHTML = sHTML_Unresolved
	} else {
		da.idDivUnresolvedWagers.innerHTML = sHTML_Unresolved
	}

	if (nNoRecords_Resolved) {
		var sHTML_Resolved = "<table width=99.5% bgcolor=#f0ffff border=1 cellspacing=0 cellpadding=5 align=center><tr><td><center><b><font color=maroon>You have no Resolved Wagers</font></b></center><font style='font-size:4px'><br></font></td></tr></table>"
		da.idDivResolvedWagers.style.height="50px"
		da.idDivResolvedWagers.innerHTML = sHTML_Resolved
	} else {
		da.idDivResolvedWagers.innerHTML = sHTML_Resolved
	}
}

async function DoUnlockDAI() {
// Set Allowance
	alert("After the MetaMask 'Transaction confirmed' message is shown, refresh this page and your DAI balance will be displayed.")
	try {
		var objOption = {from: gsMetaMaskAccount};

		gobjDAIContract.methods.approve(
			gcsContract_Predictor_live, -1
		).send(objOption, async function(error,result){
			if (!error) {
				console.log("Returned from 'approve'")
				console.log(result)
			} else {
					alert("Error: " + error.message);
			}
		});
	} catch (error) {
		alert("Error: " + error);
	}
	await DoGetMetaMaskAccount()
}

async function DoGetMetaMaskAccount() {
	gsMetaMaskNetwork = await gobjWeb3_metamask.eth.net.getNetworkType()
	var objMetaMaskAccount = await gobjWeb3_metamask.eth.getAccounts()
	gsMetaMaskAccount = objMetaMaskAccount[0]
	if (gsMetaMaskNetwork == 'kovan') {
		gsNetwork_name = "Kovan Test Network"
		gsNetwork_prefix = "kovan."
		gsDaiContractAddress_live = gsDaiContractAddress_Kovan
		gcsContract_Predictor_live = gcsContract_Predictor_Kovan
	}
	if (gsMetaMaskNetwork == 'main') {
		gsNetwork_name = "Main Ethereum Network"
		gsDaiContractAddress_live = gsDaiContractAddress_Mainnet
		gcsContract_Predictor_live = gcsContract_Predictor_Mainnet
	}
	if (gsNetwork_name && gsMetaMaskAccount) {
		gobjContract_Predictor_MetaMask = new gobjWeb3_metamask.eth.Contract(gsABI_Predictor, gcsContract_Predictor_live);
		
		gnMetaMaskBalance = 0;
		gobjDAIContract = new gobjWeb3_metamask.eth.Contract(gsABI_ERC20, gsDaiContractAddress_live);
		var nApprovedDai = parseInt(await gobjDAIContract.methods.allowance(gsMetaMaskAccount,gcsContract_Predictor_live).call())
		
		var sTemp = ""
		if (nApprovedDai) {
			var nBalance = await gobjDAIContract.methods.balanceOf(gsMetaMaskAccount).call()
			if (nApprovedDai < parseFloat(nBalance)) {
				nBalance = nApprovedDai
			}
			gnMetaMaskBalance = (Math.floor(gobjWeb3_metamask.utils.fromWei(nBalance.toString(), 'ether')*100)/100).toFixed(2)
			sTemp = "<font color=green>DAI:</font> " + gnMetaMaskBalance
		} else {
			sTemp = "<input type=button value='Unlock DAI' style='background:navy;color:white;font-size:13px;font-weight:bold' onClick=DoUnlockDAI()>"
		}
		da.idSpanMetaMaskStatus.innerHTML = "<b>You are logged into the <font color=navy>" + gsNetwork_name + "</font>: <a target=_ex href='https://" + gsNetwork_prefix + "etherscan.io/address/" + gsMetaMaskAccount +
				"' class=bluelink>" + gsMetaMaskAccount.substring(0,6) + "..</a> " + sTemp
		da.idDivCreateWagerProposal.style.display = "inline"
	} else {
		da.idSpanMetaMaskStatus.innerHTML = "<i>Please use <b>MetaMask</b> to login to Kovan or Mainnet, then refresh this page.</i>"
	}
}

function NumericOnly(e) {
	var n = window.event ? e.keyCode : e.which
	if ( !( (n >= 48 && n <=57) || n==46 || n==0 || n==8) ) {return false}
}

function NoQuotes(e) {
	var n = window.event ? e.keyCode : e.which
	if (n == 34) {return false}
}

function CheckWagerDepositForEnter(e, nIndex) {
	var n = window.event ? e.keyCode : e.which
	if (n == 13 || n == 10) {
		DoProfitCalculation(nIndex)
		return false
	}
	if ( !( (n >= 48 && n <=57) || n==46 || n==0 || n==8) ) {return false}
}

function DoProfitCalculation(nIndex) {
	var sCalc = "<i>Enter a <b>Deposit</b> to see <b>Maximum Wager</b>.</i>"
	if (!isNaN(document.getElementById("idTxtCreate_WagerDeposit_" + nIndex).value)) {
		if (document.getElementById("idTxtCreate_WagerDeposit_" + nIndex).value > 0) {
			var nDeposit = Math.floor(document.getElementById("idTxtCreate_WagerDeposit_" + nIndex).value * 100) / 100
			document.getElementById("idTxtCreate_WagerDeposit_" + nIndex).value = nDeposit
			var nMultiplier = 100 / document.getElementById("idCmbCreate_Profit_" + nIndex).options[document.getElementById("idCmbCreate_Profit_" + nIndex).selectedIndex].value
			var nMaximumWager = Math.floor(nDeposit * nMultiplier * 100) / 100
			nMaximumWager = parseFloat(nMaximumWager.toFixed(2)).toLocaleString('en-US', {minimumFractionDigits: 2})
			
			sCalc = "Acceptor's <b>Maximum Wager</b> is <b>" + nMaximumWager + "</b>."
		}
	}
	document.getElementById("idSpanProfitCalculation_" + nIndex).innerHTML = sCalc
}

async function DoCreate_Submit(nQuestionID) {
	var nWagerDeposit = document.getElementById("idTxtCreate_WagerDeposit_" + nQuestionID).value
	var nNG_WagerDeposit = 0
	if (isNaN(nWagerDeposit)) {
		nNG_WagerDeposit = 1
	} else {
		nWagerDeposit = Math.floor(nWagerDeposit *100) / 100
		nWagerDeposit = CleanFloat(nWagerDeposit * gcnTransactionFee_Multiplier)
		if (isNaN(nWagerDeposit) || nWagerDeposit < .01 || nWagerDeposit >= gnMetaMaskBalance) {
			nNG_WagerDeposit = 1
		}
	}
	if (nNG_WagerDeposit) {
		alert("The Deposit must be at least .01, and less than your DAI Balance (after the 1.5% transaction fee).")
		return
	}

	if (document.getElementById("idTxtCreate_MinimumWager_" + nQuestionID).value == "") {
		document.getElementById("idTxtCreate_MinimumWager_" + nQuestionID).value = ".01"
	}
	
	var nMinimumWager = document.getElementById("idTxtCreate_MinimumWager_" + nQuestionID).value
	if (isNaN(nMinimumWager)) {
		alert("Minimum Wager must be at least .01.")
		return
	} else {
		nMinimumWager = parseFloat(nMinimumWager)
		if (isNaN(nMinimumWager)) {
			alert("Minimum Wager must be at least .01.")
			return
		}
		if (nMinimumWager < .01) {
			nMinimumWager = .01
		}
		nMinimumWager = Math.floor(nMinimumWager *100) / 100
		var nProfitPercent = document.getElementById("idCmbCreate_Profit_" + nQuestionID).options[document.getElementById("idCmbCreate_Profit_" + nQuestionID).selectedIndex].value
		var nMaximumWager = Math.floor(CleanFloat(document.getElementById("idTxtCreate_WagerDeposit_" + nQuestionID).value * (100 / nProfitPercent))* 100) / 100

		if (parseFloat(nMinimumWager) > parseFloat(nMaximumWager)) {
			alert("Minimum Wager cannot be greater than the Acceptor's Maximum Wager.")
			return
		}
		if (CleanFloat(nMinimumWager * (nProfitPercent/100)) < .01) {
			alert("[Minimum Wager] times [Profit %] must be at least .01.")
			return
		}
	}
	
	if (!confirm("The next Metamask Confirmation popup will cause " + nWagerDeposit.toFixed(2) + " DAI to be transferred from your account.\n You may cancel your Wager Proposal before it is accepted.")) {
		return
	}
		
	try {
		var nPredictedYesNo = document.getElementById("idCmbPredictionYesNo_" + nQuestionID).selectedIndex;
		var nResolutionDate = gnaExpirationDates[nQuestionID]
		if (nPredictedYesNo == 0) {
			nPredictedYesNo = 1
		} else {
			nPredictedYesNo = 2
		}
		var nWeiDeposit = gobjWeb3_metamask.utils.toWei(nWagerDeposit.toString(), 'ether')
		var objOption = {from: gsMetaMaskAccount};

		gobjContract_Predictor_MetaMask.methods.zCreateProposal(
			nWeiDeposit,
			gobjWeb3_metamask.utils.toWei(nMinimumWager.toString(), 'ether'),
			nPredictedYesNo,
			nResolutionDate,
			nProfitPercent,
			nQuestionID
		).send(objOption, async function(error,result){
			if (!error) {
				await DoGetMetaMaskAccount()
				da.idSpanLastTransactionHash.innerHTML = "<b>Last transaction</b> (" + await DoGetCurrentDateTime() + "): " + 
					"<b><a target=_ex href='https://" + gsNetwork_prefix + "etherscan.io/tx/" + result + "' class=bluelink>" + result.substr(0,6) + "..</a></b>"
				setTimeout(function() {
					alert("After your transaction has been confirmed, refresh this page.\nTo see the status, click the 'Last transaction' link.")
				}, 500)
			} else {
				alert("Error: " + error.message);
			}
		});
	} catch (error) {
		alert("Error: " + error);
	}

}

function DoGetFormattedDateTime(nEpoch) {
	var sDate = new Date(nEpoch*1000).toISOString();
	return sDate.substr(0,10) + " " + sDate.substr(11,5)
}

async function DoGetCurrentDateTime() {
	var sDate
	var objBlock = await gobjWeb3_metamask.eth.getBlock("latest")
	gnCurrentDateTime = objBlock.timestamp
	sDate = new Date(gnCurrentDateTime*1000).toISOString();
	return sDate.substr(0,10) + " " + sDate.substr(11,5)
}

async function DoAcceptor_Submit(nProposalID, nMinimumWager, nMaximumWager) {

	var nWager = parseFloat(document.getElementById("idTxtAcceptor_WagerDeposit" + nProposalID).value)
	if (isNaN(nWager) || nWager < parseFloat(nMinimumWager) || nWager > parseFloat(nMaximumWager)) {
		alert("Please enter a Wager that is between the Minimum and Maximum wager shown.")
		return
	}
	
	nWager = Math.floor(nWager * 100) / 100
	nWager = CleanFloat(nWager * gcnTransactionFee_Multiplier)
	if (nWager >= gnMetaMaskBalance) {
		alert("Your Wager must be less than your DAI Balance.")
		return
	}
	
	try {
		var objOption = {from: gsMetaMaskAccount};

		gobjContract_Predictor_MetaMask.methods.zCreateAcceptance(
			nProposalID, gobjWeb3_metamask.utils.toWei(nWager.toString(), 'ether')
		).send(objOption, async function(error,result){
			if (!error) {
				await DoGetMetaMaskAccount()
				da.idSpanLastTransactionHash.innerHTML = "<b>Last transaction</b> (" + await DoGetCurrentDateTime() + "): " + 
					"<b><a target=_ex href='https://" + gsNetwork_prefix + "etherscan.io/tx/" + result + "' class=bluelink>" + result.substr(0,6) + "..</a></b>"
				setTimeout(function() {
					alert("After your transaction has been confirmed, refresh this page.\nTo see the status, click the 'Last transaction' link.")
				}, 500)
			} else {
				alert("Error: " + error.message);
			}
		});
	} catch (error) {
		alert("Error: " + error);
	}
}

async function DoCancelProposal(nProposalID) {
	try {
		var objOption = {from: gsMetaMaskAccount};

		gobjContract_Predictor_MetaMask.methods.zCancelProposal(
			nProposalID
		).send(objOption, async function(error,result){
			if (!error) {
				await DoGetMetaMaskAccount()
				da.idSpanLastTransactionHash.innerHTML = "<b>Last transaction</b> (" + await DoGetCurrentDateTime() + "): " + 
					"<b><a target=_ex href='https://" + gsNetwork_prefix + "etherscan.io/tx/" + result + "' class=bluelink>" + result.substr(0,6) + "..</a></b>"
				setTimeout(function() {
					alert("After your transaction has been confirmed, refresh this page.\nTo see the status, click the 'Last transaction' link.")
				}, 500)
			} else {
				alert("Error: " + error.message);
			}
		});
	} catch (error) {
		alert("Error: " + error);
	}
}

async function DoResolveWager(nAcceptanceID) {
	try {
		var objOption = {from: gsMetaMaskAccount};

		gobjContract_Predictor_MetaMask.methods.zResolveWager(
			nAcceptanceID
		).send(objOption, async function(error,result){
			if (!error) {
				await DoGetMetaMaskAccount()
				da.idSpanLastTransactionHash.innerHTML = "<b>Last transaction</b> (" + await DoGetCurrentDateTime() + "): " + 
					"<b><a target=_ex href='https://" + gsNetwork_prefix + "etherscan.io/tx/" + result + "' class=bluelink>" + result.substr(0,6) + "..</a></b>"
				setTimeout(function() {
					alert("After your transaction has been confirmed, refresh this page.\nTo see the status, click the 'Last transaction' link.")
				}, 500)
			} else {
				alert("Error: " + error.message);
			}
		});
	} catch (error) {
		alert("Error: " + error);
	}
}

function CleanFloat(nNumber) {
	return parseFloat(nNumber.toFixed(9))
}

</script>
</head>
<body bgcolor=navy onLoad=DoLoad()><table bgcolor=white cellspacing=0 cellpadding=0 width=1366 align=center border=1 style='height:715px'><tr><td valign=top>
	<table width=100%><tr>
		<td width=40%>
			<span id=idSpanMetaMaskStatus></span>
		</td>
		<td width=20% align=center><font color=maroon style='font-size:16px'><b>Prediction Wagers v1.0</b></font></td>
		<td align=center width=30%><b><font color=red>Currency is DAI, Times are UTC </font></b>&nbsp;&nbsp; Current: <span id=idSpanCurrentTime></span></td>
		<td align=right width=10%>
			<a target=_ext href=TermsOfUse.htm class=bluelink><b>Terms of Use</b></a>&nbsp;&nbsp;
			<a target=_ext href=/v1.0 class=bluelink><b>Help</b></a>
		</td>
	</tr></table>
<table align=center cellspacing=0 cellpadding=0 width=99.5%><tr><td><span id=idSpanLastTransactionHash></span></td></tr></table>

<div id=idDivCreateWagerProposal style='display:none'>
<table width=99.5% bgcolor=#ffffe8 border=1 cellspacing=0 cellpadding=5 align=center><tr><td>
<center><b><font color=maroon><span id=idSpanCreateWagerProposalCaption>Create a Wager Proposal</span></font></b></center><font style='font-size:4px'><br></font>
<span id=idSpanQuestions></span>

</td></tr></table>
<br>
</div>

<div id=idDivOpenProposals style="overflow:auto; height:150px;"></div><br>

<div id=idDivUnresolvedWagers style="overflow:auto; height:150px;"></div><br>

<div id=idDivResolvedWagers style="overflow:auto; height:150px;"></div>

<div id=idBottomFooter style='position: absolute; top: 675px; width: 1366px'>
<table cellspacing=0 cellpadding=0 width=99% align=center><tr>
<td align=center>
This dApp and user interface were created by an anonymous author, and are publicly accessible. They can be run from any server, so this website is not responsible or liable for their usage. 
See <a target=_ex class=bluelink href='TermsOfUse.htm'>Terms of Use</a>.
</td>
<td align=right>
</td>
</tr></table>

<font style='font-size:4px'><br></font>
<table width=99% align=center><tr>
<td align=left>
The contract adds a 1.5% transaction fee to each deposit or wager.
</td>
<td align=right>
This version (1.0) displays wagers from <b>4/1/2020-4/30/2020</b>. <a target=_ex class=bluelink href=/v1.0>Click here to see other versions.</a>
</td>
</tr></table>
</div>
</td></tr></table></body></html>
